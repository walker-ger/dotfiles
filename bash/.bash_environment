#!/bin/bash

# -----------------------------------------------------------------------------
# User environment update functions
# -----------------------------------------------------------------------------

function add-prefix-path() {
    if [ $# -ge 2 ]; then
        local VAR=$1
        local MYPATH=${@:2}
        local MYPATHS=$(eval echo "\$$VAR")
        [[ ":${MYPATHS}:" != *":$MYPATH:"* ]] && \
            eval "export ${VAR}=\"${MYPATH}\${${VAR}:+:}\${${VAR}}\""
    else
        echo "Usage: add-path-prefix <VAR> <PATH>" 1>&2
    fi
}

function add-postfix-path() {
    if [ $# -ge 2 ]; then
        local VAR=$1
        local MYPATH=${@:2}
        local MYPATHS=$(eval echo "\$$VAR")
        [[ ":${MYPATHS}:" != *":$MYPATH:"* ]] && \
            eval "export ${VAR}=\"\${${VAR}}\${${VAR}:+:}${MYPATH}\""
    else
        echo "Usage: add-path-postfix <VAR> <PATH>" 1>&2
    fi
}

function add-path() {
    local USAGE="echo 'Usage: add-path <library|include|bin> <PATH> [[PATH] [PATH] ...]' 1>&2"
    if ! [ $# -ge 1 ]; then
        eval "$USAGE"
        return 1;
    fi

    local VARS
    case $1 in
        library) VARS=(LD_LIBRARY_PATH LD_RUN_PATH LIBRARY_PATH);;
        include) VARS=(C_INCLUDE_PATH CPLUS_INCLUDE_PATH INCLUDE);;
        bin)     VARS=(PATH);;
        *)       eval $USAGE; return 1;;
    esac

    local VAR
    local MYPATH
    for VAR in "$VARS"; do
        for MYPATH in "$@"; do
            add-prefix-path $VAR $MYPATH
        done
    done
}

if [ -z "$BASH_CUSTOM_ENVIRONMENT" ]; then

    # -----------------------------------------------------------------------------
    # update PATH, INCLUDE and LIBRARY paths and environment
    # -----------------------------------------------------------------------------

    CUDA="/usr/local/cuda"
    GCCL="$HOME/gcc"
    PRG="$HOME/usr"
    PYTHON="$PRG/local/python"

    add-path include $GCCL/include $PRG/include $PRG/include/ncurses $CUDA/include /usr/include
    add-path library $GCCL/lib $GCCL/lib64 $PRG/lib $PRG/lib64 $CUDA/lib $CUDA/lib64 /lib64 /usr/lib
    add-path bin     $GCCL/bin $PRG/bin:$CUDA/bin $PRG/bin/texbin $HOME/texlive/bin/i386-linux $PYTHON/bin


    # -----------------------------------------------------------------------------
    # Update program environment
    # -----------------------------------------------------------------------------

    # setup git user
    printf "[user]\n    name = $USER@$HOSTNAME\n    email = $USER@cs.ru.nl\n" > $HOME/.gituser

    #export CDPATH=".:$HOME"                 # homedir available from everywhere
    export CVSROOT="$HOME/trunk/cvs"
    export CVSEDITOR="vim"
    mkdir -p "$CVSROOT/CVSROOT"
    export PYTHONPATH="$PYTHON:/usr/local/lib/python2.7/dist-packages"

    export PKG_CONFIG_PATH="$PRG/lib/pkgconfig"
    export VALGRIND_LIB="$PRG/lib/valgrind"
    export EDITOR="vim"
    export VISUAL="vim"
    export XZ_OPT="-9"                      # best compression for tar.xz creation
    export LC_ALL="en_US.UTF-8"             # use UTF-8 character set
    export LANG="en_US.UTF-8"
    export LANGUAGE="en_US.UTF-8"
    export CLICOLOR=1                       # use colors (if possible)
    export PRINTER="$([ $HOSTNAME == "silveru" ] && echo "lacertian";)"
    export STDERR_COLOR="\033[31m"          # make stderr output red
    export HISTTIMEFORMAT="[%Y-%m-%d %T] "  # timestamp history commands
    export HISTCONTROL="ignoredups"         # dont record duplicate commands
    export HISTIGNORE="&:ls:cd:[bf]g:exit"  # dont record simple commands like ls
    export CORES=$(grep -c ^processor /proc/cpuinfo)
    export TEXMFHOME="${HOME}/.texmf"

    if [[ -n $CORES ]] && [ $CORES -gt 1 ]; then
        export MAKEFLAGS="-j$CORES"             # gnu make run parallel
    fi

    if [ -x /usr/bin/dircolors ]; then
        test -r $HOME/.lsrc && eval "$(dircolors --sh "$HOME/.lsrc")"
    fi

    ulimit -c unlimited

    export BASH_CUSTOM_ENVIRONMENT="set"
fi

if [ -n "$TMUX" ]; then
    export TERM='screen-256color'
else
    export TERM='xterm-256color'
fi

