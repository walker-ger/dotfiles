#[user]
    #name = username
    #email = email
[include] # add file containing user info
    path = ~/.gituser
[push]
	default = matching
[merge]
	defaultToUpstream = true
	tool = vim -d -c 'norm ]c[c'
	conflictstyle = diff3
[color]
    diff = always
[log]
    decorate = short
[mergetool]
	prompt = false
[difftool]
    prompt = false
[difftool "diffpdf"]
	cmd = diffpdf \"$LOCAL\" \"$REMOTE\"
[difftool "vimdiff"]
	cmd = vim -d -c 'norm ]c[c' \"$LOCAL\" \"$REMOTE\"
[alias]
	pdfdiff = difftool --tool=diffpdf
	vimdiff = difftool --tool=vimdiff
	log1 = log --all --graph --decorate --pretty=oneline --abbrev-commit
    log2 = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset)%x09%x09%C(auto)%d%C(reset) %x09%x09%C(bold yellow)(%cr)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	log3 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n'' %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
    log4 = log --graph --full-history --oneline --all --color --pretty=format:'%C(bold blue)%h%x09%C(auto)%d%x1b[0m%x20%s'
    logx = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset)+%C(dim black)(%cr)%C(reset)+%C(auto)%d%C(reset)++\n+++       %C(bold black)%an%C(reset)%C(black): %s%C(reset)'
    log5 = !bash -c '"                                                                              \
        while IFS=+ read -r hash time branch message; do                                            \
            timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
            timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
            printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"$message\";  \
        done < <(git logx && echo);"'
    log6 = !bash -c '"                                                                              \
        while IFS=+ read -r hash time branch message; do                                            \
            timelength=$(echo \"$time\" | sed -r \"s:[^ ][[]([0-9]{1,2}(;[0-9]{1,2})?)?m::g\");     \
            timelength=$(echo \"16+${#time}-${#timelength}\" | bc);                                 \
            printf \"%${timelength}s    %s %s %s\n\" \"$time\" \"$hash\" \"$branch\" \"\";          \
        done < <(git logx && echo);"'
    log7 = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n         %C(black)[%cr]%C(reset)  %x09%C(black)%an: %s %C(reset)'

    vtree = !bash -c '"                                                         \
        echo;                                                                   \
        git log5;                                                               \
        echo;"'
    stree = !bash -c '"                                                         \
        echo;                                                                   \
        git log6;                                                               \
        echo;"'
    tree = !bash -c '"                                                          \
        echo;                                                                   \
        git log7;                                                               \
        echo;"'

    roothash = !bash -c '"                                                      \
        git log --pretty=oneline --no-color                                     \
        | tail -1                                                               \
        | awk '{print $1}';"'

    upstream = !bash -c '"                                                      \
        BRANCH=$(git branchname);                                               \
        git branch -vv                                                          \
        | grep \"^\\*\"                                                         \
        | sed -n \"s:.*\\[\\(.*\\)].*:\\1:p\";"'

    pullhard = !bash -c '"                                                      \
        UPSTREAM=$(git upstream);                                               \
        if [ \"$UPSTREAM\" != \"\" ]; then                                      \
            read -sn 1 -p \"This will delete untracked files!! Press any key to continue, or CTRL-C to abort...\" 2>&1;\
            git fetch --all;                                                    \
            git reset --hard $UPSTREAM;                                         \
            git clean -f;                                                       \
        else                                                                    \
            echo No upstream set! 1>&2;                                         \
        fi;"'

    tar = !bash -c '"                                                           \
        BRANCH=$(git branchname);                                               \
        REPODIR=$(git root);                                                    \
        REPONAME=\"$(basename $REPODIR)\";                                      \
        ARCHIVE=\"${REPODIR}/${REPONAME}_${BRANCH}_$(date '+%Y_%m_%d_%H_%M_%S').tar.xz\";\
        CURRENTDIR=$(pwd);                                                      \
        cd $REPODIR;                                                            \
        XZ_OPT=-9;                                                              \
        git ls                                                                  \
        | grep -v \"\\.git.*\"                                                  \
        | tar -cvJf \"$ARCHIVE\" -T -;                                          \
        echo;                                                                   \
        echo \"archive $ARCHIVE created...\";                                   \
        cd $CURRENTDIR;"'

    repository = !bash -c '"                                                    \
        echo  \"Repository $(git root):$(git branchname)\";"'

    pullall = !bash -c '"                                                       \
        for branch in $(git branch -a | grep remotes | grep -v HEAD | grep -v master); do\
            git branch --track ${branch#remotes/origin/} $branch;               \
        done;                                                                   \
        git pull --all;'"

    commit-now = !bash -c '"                                                    \
        git commit -a -m \"$(date '+%Y_%m_%d_%H_%M_%S')\";"'

    commit-now-push = !bash -c '"                                               \
        git repository;                                                         \
        echo;                                                                   \
        echo Changes..;                                                         \
        git status -s;                                                          \
        echo;                                                                   \
        echo Commiting..;                                                       \
        git commit-now;                                                         \
        echo;                                                                   \
        echo Pushing...;                                                        \
        git push;"'

    status-pull = !bash -c '"                                                   \
        git repository;                                                         \
        echo;                                                                   \
        echo \"Checking status...\";                                            \
        if [ \"$(git status -s | grep -v \"^??\")\" == \"\" ]; then             \
            echo;                                                               \
            echo \"Pulling...\";                                                \
            git pull;                                                           \
        else                                                                    \
            echo \"There are local changes!\" 1>&2;                             \
        fi;"'

    delete-all = !bash -c '"                                                    \
        git checkout --orphan latest_branch;                                    \
        git add -A;                                                             \
        git commit -am \"rebased\";                                             \
        git branch -D master;                                                   \
        git branch -m master;                                                   \
        git push -f origin master;"'

    print-tags = !bash -c '"                                                    \
        for f in $(git tag -l); do                                              \
            git print-tag $f | fold -s -w 80;                                   \
            echo -en \"========================================\";              \
            echo -en \"========================================\n\n\";          \
        done;"'

    print-tag = !sh -c 'git rev-parse $1 | xargs git cat-file -p' -
    root = rev-parse --show-toplevel
    branchname = rev-parse --abbrev-ref HEAD
    check = fetch --dry-run -v
    unstage = reset HEAD -- .
    add-push = remote set-url --add --push origin
    ls = ls-tree -r HEAD --name-only
    st = status
    co = checkout
    cm = commit

    sp = !git status-pull
	cn = !git commit-now
    cnp = !git commit-now-push
[core]
    editor = vim
    excludesfile = ~/.gitignoreglobal
[merge "ours"]
	driver = true
[pager]
	show = vim -R -
	color = false
[status]
	submoduleSummary = true
